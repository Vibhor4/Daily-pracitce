package interview.leetcode._0xx._9x;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by zzt on 7/26/17.
 * <p>
 * <h3>DP:</h3>
 * <li>Si: set generated by i elements</li>
 * <li>Sn = S(n-1) & (S(n-1)+An): append new elements to old sets</li>
 * <p>
 * <h3>Definition</h3>
 * <li>If this element chosen, then xxx; else if not chosen</li>
 * <li>Remove all duplicate first, then add them</li>
 */
public class Subset2 {

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        HashMap<Integer, Integer> count = new HashMap<>();
        // remove duplicate
        for (int num : nums) {
            if (count.containsKey(num)) {
                count.put(num, count.get(num) + 1);
            } else {
                count.put(num, 1);
            }
        }
        // dp way
        res.add(new ArrayList<>());
        for (Integer integer : count.keySet()) {
            Integer c = count.get(integer);
            if (c == 1) {
                append(res, integer);
            } else {
                ArrayList<ArrayList<Integer>> resTmp = new ArrayList<>();
                ArrayList<Integer> tmp = new ArrayList<>();
                for (Integer i = 0; i < c; i++) {
                    tmp.add(integer);
                    for (List<Integer> re : res) {
                        ArrayList<Integer> list = new ArrayList<>(re);
                        list.addAll(tmp);
                        resTmp.add(list);
                    }
                }
                res.addAll(resTmp);
            }

        }
        return res;
    }

    private void append(List<List<Integer>> res, Integer adds) {
        List<List<Integer>> tmp = new ArrayList<>();
        for (List<Integer> re : res) {
            ArrayList<Integer> lists = new ArrayList<>(re);
            lists.add(adds);
            tmp.add(lists);
        }
        res.addAll(tmp);
    }

    @Deprecated
    private void recursive(List<List<Integer>> res, int[] nums, int i, boolean[] chosen) {
        if (i == nums.length) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int x = 0; x < chosen.length; x++) {
                if (chosen[i]) {
                    list.add(nums[x]);
                }
            }
            res.add(list);
            return;
        }

        // not choose
        recursive(res, nums, i + 1, chosen);
        chosen[i] = true;
        recursive(res, nums, i + 1, chosen);
        chosen[i] = false;
    }

    public static void main(String[] args) {
        Subset2 subset2 = new Subset2();
        System.out.println(subset2.subsetsWithDup(new int[]{1, 2, 2, 3, 4, 4}));
    }
}
