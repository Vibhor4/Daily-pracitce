
fib_test.out:     file format elf64-x86-64


Disassembly of section .init:

00000000004004d0 <_init>:
  4004d0:	48 83 ec 08          	sub    rsp,0x8
  4004d4:	48 8b 05 1d 0b 20 00 	mov    rax,QWORD PTR [rip+0x200b1d]        # 600ff8 <_DYNAMIC+0x1d0>
  4004db:	48 85 c0             	test   rax,rax
  4004de:	74 05                	je     4004e5 <_init+0x15>
  4004e0:	e8 5b 00 00 00       	call   400540 <__gmon_start__@plt>
  4004e5:	48 83 c4 08          	add    rsp,0x8
  4004e9:	c3                   	ret    

Disassembly of section .plt:

00000000004004f0 <puts@plt-0x10>:
  4004f0:	ff 35 12 0b 20 00    	push   QWORD PTR [rip+0x200b12]        # 601008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4004f6:	ff 25 14 0b 20 00    	jmp    QWORD PTR [rip+0x200b14]        # 601010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4004fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400500 <puts@plt>:
  400500:	ff 25 12 0b 20 00    	jmp    QWORD PTR [rip+0x200b12]        # 601018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400506:	68 00 00 00 00       	push   0x0
  40050b:	e9 e0 ff ff ff       	jmp    4004f0 <_init+0x20>

0000000000400510 <__stack_chk_fail@plt>:
  400510:	ff 25 0a 0b 20 00    	jmp    QWORD PTR [rip+0x200b0a]        # 601020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400516:	68 01 00 00 00       	push   0x1
  40051b:	e9 d0 ff ff ff       	jmp    4004f0 <_init+0x20>

0000000000400520 <printf@plt>:
  400520:	ff 25 02 0b 20 00    	jmp    QWORD PTR [rip+0x200b02]        # 601028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400526:	68 02 00 00 00       	push   0x2
  40052b:	e9 c0 ff ff ff       	jmp    4004f0 <_init+0x20>

0000000000400530 <__libc_start_main@plt>:
  400530:	ff 25 fa 0a 20 00    	jmp    QWORD PTR [rip+0x200afa]        # 601030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400536:	68 03 00 00 00       	push   0x3
  40053b:	e9 b0 ff ff ff       	jmp    4004f0 <_init+0x20>

0000000000400540 <__gmon_start__@plt>:
  400540:	ff 25 f2 0a 20 00    	jmp    QWORD PTR [rip+0x200af2]        # 601038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400546:	68 04 00 00 00       	push   0x4
  40054b:	e9 a0 ff ff ff       	jmp    4004f0 <_init+0x20>

0000000000400550 <__isoc99_scanf@plt>:
  400550:	ff 25 ea 0a 20 00    	jmp    QWORD PTR [rip+0x200aea]        # 601040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400556:	68 05 00 00 00       	push   0x5
  40055b:	e9 90 ff ff ff       	jmp    4004f0 <_init+0x20>

Disassembly of section .text:

0000000000400560 <_start>:
  400560:	31 ed                	xor    ebp,ebp
  400562:	49 89 d1             	mov    r9,rdx
  400565:	5e                   	pop    rsi
  400566:	48 89 e2             	mov    rdx,rsp
  400569:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40056d:	50                   	push   rax
  40056e:	54                   	push   rsp
  40056f:	49 c7 c0 20 09 40 00 	mov    r8,0x400920
  400576:	48 c7 c1 b0 08 40 00 	mov    rcx,0x4008b0
  40057d:	48 c7 c7 6c 07 40 00 	mov    rdi,0x40076c
  400584:	e8 a7 ff ff ff       	call   400530 <__libc_start_main@plt>
  400589:	f4                   	hlt    
  40058a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000400590 <deregister_tm_clones>:
  400590:	b8 37 11 60 00       	mov    eax,0x601137
  400595:	55                   	push   rbp
  400596:	48 2d 30 11 60 00    	sub    rax,0x601130
  40059c:	48 83 f8 0e          	cmp    rax,0xe
  4005a0:	48 89 e5             	mov    rbp,rsp
  4005a3:	76 1b                	jbe    4005c0 <deregister_tm_clones+0x30>
  4005a5:	b8 00 00 00 00       	mov    eax,0x0
  4005aa:	48 85 c0             	test   rax,rax
  4005ad:	74 11                	je     4005c0 <deregister_tm_clones+0x30>
  4005af:	5d                   	pop    rbp
  4005b0:	bf 30 11 60 00       	mov    edi,0x601130
  4005b5:	ff e0                	jmp    rax
  4005b7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4005be:	00 00 
  4005c0:	5d                   	pop    rbp
  4005c1:	c3                   	ret    
  4005c2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4005c9:	1f 84 00 00 00 00 00 

00000000004005d0 <register_tm_clones>:
  4005d0:	be 30 11 60 00       	mov    esi,0x601130
  4005d5:	55                   	push   rbp
  4005d6:	48 81 ee 30 11 60 00 	sub    rsi,0x601130
  4005dd:	48 c1 fe 03          	sar    rsi,0x3
  4005e1:	48 89 e5             	mov    rbp,rsp
  4005e4:	48 89 f0             	mov    rax,rsi
  4005e7:	48 c1 e8 3f          	shr    rax,0x3f
  4005eb:	48 01 c6             	add    rsi,rax
  4005ee:	48 d1 fe             	sar    rsi,1
  4005f1:	74 15                	je     400608 <register_tm_clones+0x38>
  4005f3:	b8 00 00 00 00       	mov    eax,0x0
  4005f8:	48 85 c0             	test   rax,rax
  4005fb:	74 0b                	je     400608 <register_tm_clones+0x38>
  4005fd:	5d                   	pop    rbp
  4005fe:	bf 30 11 60 00       	mov    edi,0x601130
  400603:	ff e0                	jmp    rax
  400605:	0f 1f 00             	nop    DWORD PTR [rax]
  400608:	5d                   	pop    rbp
  400609:	c3                   	ret    
  40060a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000400610 <__do_global_dtors_aux>:
  400610:	80 3d 19 0b 20 00 00 	cmp    BYTE PTR [rip+0x200b19],0x0        # 601130 <__TMC_END__>
  400617:	75 11                	jne    40062a <__do_global_dtors_aux+0x1a>
  400619:	55                   	push   rbp
  40061a:	48 89 e5             	mov    rbp,rsp
  40061d:	e8 6e ff ff ff       	call   400590 <deregister_tm_clones>
  400622:	5d                   	pop    rbp
  400623:	c6 05 06 0b 20 00 01 	mov    BYTE PTR [rip+0x200b06],0x1        # 601130 <__TMC_END__>
  40062a:	f3 c3                	repz ret 
  40062c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400630 <frame_dummy>:
  400630:	bf 20 0e 60 00       	mov    edi,0x600e20
  400635:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
  400639:	75 05                	jne    400640 <frame_dummy+0x10>
  40063b:	eb 93                	jmp    4005d0 <register_tm_clones>
  40063d:	0f 1f 00             	nop    DWORD PTR [rax]
  400640:	b8 00 00 00 00       	mov    eax,0x0
  400645:	48 85 c0             	test   rax,rax
  400648:	74 f1                	je     40063b <frame_dummy+0xb>
  40064a:	55                   	push   rbp
  40064b:	48 89 e5             	mov    rbp,rsp
  40064e:	ff d0                	call   rax
  400650:	5d                   	pop    rbp
  400651:	e9 7a ff ff ff       	jmp    4005d0 <register_tm_clones>

0000000000400656 <add_map>:
//uint16_t lcarry = 0;
//uint16_t rcarry = 0;
uint16_t carry = 0;
uint16_t map[MAX16] = {0, 1};

uint16_t fib(uint16_t to);
  400656:	55                   	push   rbp
  400657:	48 89 e5             	mov    rbp,rsp
  40065a:	53                   	push   rbx
  40065b:	48 83 ec 18          	sub    rsp,0x18
  40065f:	89 f8                	mov    eax,edi
  400661:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax

  400665:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  400669:	48 98                	cdqe   
  40066b:	0f b7 84 00 00 11 60 	movzx  eax,WORD PTR [rax+rax*1+0x601100]
  400672:	00 
  400673:	66 85 c0             	test   ax,ax
  400676:	75 1c                	jne    400694 <add_map+0x3e>
uint16_t add_map(uint16_t to) {
  400678:	0f b7 5d ec          	movzx  ebx,WORD PTR [rbp-0x14]
  40067c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  400680:	89 c7                	mov    edi,eax
  400682:	e8 22 00 00 00       	call   4006a9 <fib>
  400687:	89 c2                	mov    edx,eax
  400689:	48 63 c3             	movsxd rax,ebx
  40068c:	66 89 94 00 00 11 60 	mov    WORD PTR [rax+rax*1+0x601100],dx
  400693:	00 
    if (map[to] == 0) {
        map[to] = fib(to);
  400694:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  400698:	48 98                	cdqe   
  40069a:	0f b7 84 00 00 11 60 	movzx  eax,WORD PTR [rax+rax*1+0x601100]
  4006a1:	00 
    }
  4006a2:	48 83 c4 18          	add    rsp,0x18
  4006a6:	5b                   	pop    rbx
  4006a7:	5d                   	pop    rbp
  4006a8:	c3                   	ret    

00000000004006a9 <fib>:
    return map[to];
}
  4006a9:	55                   	push   rbp
  4006aa:	48 89 e5             	mov    rbp,rsp
  4006ad:	48 83 ec 20          	sub    rsp,0x20
  4006b1:	89 f8                	mov    eax,edi
  4006b3:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax

  4006b7:	66 83 7d ec 00       	cmp    WORD PTR [rbp-0x14],0x0
  4006bc:	75 09                	jne    4006c7 <fib+0x1e>
uint16_t fib(uint16_t to) {
  4006be:	0f b7 05 3b 0a 20 00 	movzx  eax,WORD PTR [rip+0x200a3b]        # 601100 <map>
  4006c5:	eb 7b                	jmp    400742 <fib+0x99>
    if (to == 0) {
  4006c7:	66 83 7d ec 01       	cmp    WORD PTR [rbp-0x14],0x1
  4006cc:	75 09                	jne    4006d7 <fib+0x2e>
        return map[0];
  4006ce:	0f b7 05 2d 0a 20 00 	movzx  eax,WORD PTR [rip+0x200a2d]        # 601102 <map+0x2>
  4006d5:	eb 6b                	jmp    400742 <fib+0x99>
    } else if(to == 1) {
        return map[1];
  4006d7:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  4006db:	83 e8 01             	sub    eax,0x1
  4006de:	0f b7 c0             	movzx  eax,ax
  4006e1:	89 c7                	mov    edi,eax
  4006e3:	e8 6e ff ff ff       	call   400656 <add_map>
  4006e8:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
    }
  4006ec:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  4006f0:	83 e8 02             	sub    eax,0x2
  4006f3:	0f b7 c0             	movzx  eax,ax
  4006f6:	89 c7                	mov    edi,eax
  4006f8:	e8 59 ff ff ff       	call   400656 <add_map>
  4006fd:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
    uint16_t f = add_map(to - 1);
  400701:	0f b7 55 fa          	movzx  edx,WORD PTR [rbp-0x6]
  400705:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  400709:	01 d0                	add    eax,edx
  40070b:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
    uint16_t s = add_map(to - 2);
  40070f:	0f b7 45 fa          	movzx  eax,WORD PTR [rbp-0x6]
  400713:	66 3b 45 fe          	cmp    ax,WORD PTR [rbp-0x2]
  400717:	77 0a                	ja     400723 <fib+0x7a>
  400719:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  40071d:	66 3b 45 fe          	cmp    ax,WORD PTR [rbp-0x2]
  400721:	76 1b                	jbe    40073e <fib+0x95>
    uint16_t tmp = f + s;
  400723:	bf 61 09 40 00       	mov    edi,0x400961
  400728:	e8 d3 fd ff ff       	call   400500 <puts@plt>
    if (f > tmp || s > tmp) {
  40072d:	0f b7 05 fe 09 20 00 	movzx  eax,WORD PTR [rip+0x2009fe]        # 601132 <carry>
  400734:	83 c0 01             	add    eax,0x1
  400737:	66 89 05 f4 09 20 00 	mov    WORD PTR [rip+0x2009f4],ax        # 601132 <carry>
        puts("only once");
        carry += 1;
  40073e:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
    }
  400742:	c9                   	leave  
  400743:	c3                   	ret    

0000000000400744 <f>:
    return tmp;
}
  400744:	55                   	push   rbp
  400745:	48 89 e5             	mov    rbp,rsp
  400748:	48 83 ec 10          	sub    rsp,0x10
  40074c:	89 f8                	mov    eax,edi
  40074e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  400752:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax

  400756:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  40075a:	89 c7                	mov    edi,eax
  40075c:	e8 f5 fe ff ff       	call   400656 <add_map>
  400761:	89 c2                	mov    edx,eax
  400763:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  400767:	66 89 10             	mov    WORD PTR [rax],dx
void f(uint16_t to, uint16_t* res) {
  40076a:	c9                   	leave  
  40076b:	c3                   	ret    

000000000040076c <main>:
    *res = add_map(to);
}

  40076c:	55                   	push   rbp
  40076d:	48 89 e5             	mov    rbp,rsp
  400770:	48 83 ec 20          	sub    rsp,0x20
  400774:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  400777:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  40077b:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  400782:	00 00 
  400784:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  400788:	31 c0                	xor    eax,eax
int main(int argc, char *argv[])
  40078a:	bf 70 09 40 00       	mov    edi,0x400970
  40078f:	e8 6c fd ff ff       	call   400500 <puts@plt>
{
  400794:	66 c7 45 f0 00 00    	mov    WORD PTR [rbp-0x10],0x0
    printf("OS lab1, fib\nPlease Enter an aim\n");
  40079a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    uint16_t to = 0;
  4007a1:	e9 ce 00 00 00       	jmp    400874 <main+0x108>
    unsigned int i = 0;
  4007a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    while (scanf("%hd", &to) != EOF) {
  4007ad:	e9 a8 00 00 00       	jmp    40085a <main+0xee>
        i = 0;
        for (; i <= to; ++i) {
  4007b2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  4007b5:	0f b7 c0             	movzx  eax,ax
  4007b8:	48 8d 55 f2          	lea    rdx,[rbp-0xe]
  4007bc:	48 89 d6             	mov    rsi,rdx
  4007bf:	89 c7                	mov    edi,eax
  4007c1:	e8 7e ff ff ff       	call   400744 <f>
            uint16_t res;
  4007c6:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
  4007ca:	66 83 f8 18          	cmp    ax,0x18
  4007ce:	77 30                	ja     400800 <main+0x94>
            f(i, &res);
  4007d0:	48 8b 0d 21 09 20 00 	mov    rcx,QWORD PTR [rip+0x200921]        # 6010f8 <color+0x38>
  4007d7:	0f b7 45 f2          	movzx  eax,WORD PTR [rbp-0xe]
  4007db:	0f b7 d0             	movzx  edx,ax
  4007de:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  4007e1:	83 e0 07             	and    eax,0x7
  4007e4:	48 8b 04 c5 c0 10 60 	mov    rax,QWORD PTR [rax*8+0x6010c0]
  4007eb:	00 
  4007ec:	48 89 c6             	mov    rsi,rax
  4007ef:	bf 91 09 40 00       	mov    edi,0x400991
  4007f4:	b8 00 00 00 00       	mov    eax,0x0
  4007f9:	e8 22 fd ff ff       	call   400520 <printf@plt>
  4007fe:	eb 56                	jmp    400856 <main+0xea>
            if (to <= MAX16) {
                printf("%s %d %s", color[i%COLOR_SIZE], res, color[COLOR_SIZE-1]);
  400800:	0f b7 05 2b 09 20 00 	movzx  eax,WORD PTR [rip+0x20092b]        # 601132 <carry>
  400807:	0f b7 c0             	movzx  eax,ax
  40080a:	89 c6                	mov    esi,eax
  40080c:	bf 9a 09 40 00       	mov    edi,0x40099a
  400811:	b8 00 00 00 00       	mov    eax,0x0
  400816:	e8 05 fd ff ff       	call   400520 <printf@plt>
            } else {
  40081b:	48 8b 35 d6 08 20 00 	mov    rsi,QWORD PTR [rip+0x2008d6]        # 6010f8 <color+0x38>
  400822:	0f b7 45 f2          	movzx  eax,WORD PTR [rbp-0xe]
  400826:	0f b7 c8             	movzx  ecx,ax
  400829:	0f b7 05 02 09 20 00 	movzx  eax,WORD PTR [rip+0x200902]        # 601132 <carry>
  400830:	0f b7 d0             	movzx  edx,ax
  400833:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  400836:	83 e0 07             	and    eax,0x7
  400839:	48 8b 04 c5 c0 10 60 	mov    rax,QWORD PTR [rax*8+0x6010c0]
  400840:	00 
  400841:	49 89 f0             	mov    r8,rsi
  400844:	48 89 c6             	mov    rsi,rax
  400847:	bf a6 09 40 00       	mov    edi,0x4009a6
  40084c:	b8 00 00 00 00       	mov    eax,0x0
  400851:	e8 ca fc ff ff       	call   400520 <printf@plt>
int main(int argc, char *argv[])
{
    printf("OS lab1, fib\nPlease Enter an aim\n");
    uint16_t to = 0;
    unsigned int i = 0;
    while (scanf("%hd", &to) != EOF) {
  400856:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
  40085a:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
  40085e:	0f b7 c0             	movzx  eax,ax
  400861:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
  400864:	0f 83 48 ff ff ff    	jae    4007b2 <main+0x46>
                printf("%s %d %s", color[i%COLOR_SIZE], res, color[COLOR_SIZE-1]);
            } else {
                printf("carry is %d", carry);
                printf("%s 0x%x%x %s", color[i%COLOR_SIZE], carry, res, color[COLOR_SIZE-1]);
            }

  40086a:	bf b3 09 40 00       	mov    edi,0x4009b3
  40086f:	e8 8c fc ff ff       	call   400500 <puts@plt>
}

int main(int argc, char *argv[])
{
    printf("OS lab1, fib\nPlease Enter an aim\n");
    uint16_t to = 0;
  400874:	48 8d 45 f0          	lea    rax,[rbp-0x10]
  400878:	48 89 c6             	mov    rsi,rax
  40087b:	bf b4 09 40 00       	mov    edi,0x4009b4
  400880:	b8 00 00 00 00       	mov    eax,0x0
  400885:	e8 c6 fc ff ff       	call   400550 <__isoc99_scanf@plt>
  40088a:	83 f8 ff             	cmp    eax,0xffffffff
  40088d:	0f 85 13 ff ff ff    	jne    4007a6 <main+0x3a>
                printf("carry is %d", carry);
                printf("%s 0x%x%x %s", color[i%COLOR_SIZE], carry, res, color[COLOR_SIZE-1]);
            }

        }
        puts("");
  400893:	b8 00 00 00 00       	mov    eax,0x0
    }
  400898:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  40089c:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
  4008a3:	00 00 
  4008a5:	74 05                	je     4008ac <main+0x140>
  4008a7:	e8 64 fc ff ff       	call   400510 <__stack_chk_fail@plt>
  4008ac:	c9                   	leave  
  4008ad:	c3                   	ret    
  4008ae:	66 90                	xchg   ax,ax

00000000004008b0 <__libc_csu_init>:
  4008b0:	41 57                	push   r15
  4008b2:	41 89 ff             	mov    r15d,edi
  4008b5:	41 56                	push   r14
  4008b7:	49 89 f6             	mov    r14,rsi
  4008ba:	41 55                	push   r13
  4008bc:	49 89 d5             	mov    r13,rdx
  4008bf:	41 54                	push   r12
  4008c1:	4c 8d 25 48 05 20 00 	lea    r12,[rip+0x200548]        # 600e10 <__frame_dummy_init_array_entry>
  4008c8:	55                   	push   rbp
  4008c9:	48 8d 2d 48 05 20 00 	lea    rbp,[rip+0x200548]        # 600e18 <__init_array_end>
  4008d0:	53                   	push   rbx
  4008d1:	4c 29 e5             	sub    rbp,r12
  4008d4:	31 db                	xor    ebx,ebx
  4008d6:	48 c1 fd 03          	sar    rbp,0x3
  4008da:	48 83 ec 08          	sub    rsp,0x8
  4008de:	e8 ed fb ff ff       	call   4004d0 <_init>
  4008e3:	48 85 ed             	test   rbp,rbp
  4008e6:	74 1e                	je     400906 <__libc_csu_init+0x56>
  4008e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4008ef:	00 
  4008f0:	4c 89 ea             	mov    rdx,r13
  4008f3:	4c 89 f6             	mov    rsi,r14
  4008f6:	44 89 ff             	mov    edi,r15d
  4008f9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  4008fd:	48 83 c3 01          	add    rbx,0x1
  400901:	48 39 eb             	cmp    rbx,rbp
  400904:	75 ea                	jne    4008f0 <__libc_csu_init+0x40>
  400906:	48 83 c4 08          	add    rsp,0x8
  40090a:	5b                   	pop    rbx
  40090b:	5d                   	pop    rbp
  40090c:	41 5c                	pop    r12
  40090e:	41 5d                	pop    r13
  400910:	41 5e                	pop    r14
  400912:	41 5f                	pop    r15
  400914:	c3                   	ret    
  400915:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40091c:	00 00 00 00 

0000000000400920 <__libc_csu_fini>:
  400920:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000400924 <_fini>:
  400924:	48 83 ec 08          	sub    rsp,0x8
  400928:	48 83 c4 08          	add    rsp,0x8
  40092c:	c3                   	ret    
